name: govulncheck

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        type: string
        default: 'stable'
      working-directory:
        description: 'Working directory to run govulncheck in'
        required: false
        type: string
        default: '.'
      mode:
        description: 'Analysis mode (source or binary)'
        required: false
        type: string
        default: 'source'
      tags:
        description: 'Build tags to consider when analyzing source code'
        required: false
        type: string
        default: ''
      include-tests:
        description: 'Include test files in analysis'
        required: false
        type: boolean
        default: false
      json-output:
        description: 'Output vulnerabilities in JSON format'
        required: false
        type: boolean
        default: false
      imports-only:
        description: 'Only analyze imports, not function bodies'
        required: false
        type: boolean
        default: false
      symbolize:
        description: 'Symbolize stack traces in output'
        required: false
        type: boolean
        default: false

jobs:
  govulncheck:
    name: govulncheck
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        id: scan
        run: |
          cd "${{ inputs.working-directory }}"

          ARGS=""
          [ "${{ inputs.mode }}" != "source" ] && ARGS="$ARGS -mode=${{ inputs.mode }}"
          [ -n "${{ inputs.tags }}" ] && ARGS="$ARGS -tags=${{ inputs.tags }}"
          [ "${{ inputs.include-tests }}" = "true" ] && ARGS="$ARGS -test"
          [ "${{ inputs.json-output }}" = "true" ] && ARGS="$ARGS -json"
          [ "${{ inputs.imports-only }}" = "true" ] && ARGS="$ARGS -imports-only"
          [ "${{ inputs.symbolize }}" = "true" ] && ARGS="$ARGS -symbolize"

          echo "Running govulncheck with args: $ARGS"
          if ! govulncheck $ARGS ./...; then
            echo "::error::govulncheck found vulnerabilities"
            exit 1
          fi
        continue-on-error: true

      - name: Check scan status
        if: steps.scan.outcome == 'failure'
        run: |
          echo "::error::Vulnerabilities found in the codebase. Please review the scan results above."
          exit 1
